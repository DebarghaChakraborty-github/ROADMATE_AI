import React, { useState, useEffect, useCallback, useMemo } from 'react';
import MainLayout from '../Layouts/MainLayout';
import { useAuth } from '../context/AuthContext';
import { useRider } from '../context/RiderContext';
import { useVehicle } from '../context/VehicleContext';
import Card from '../components/Card';
import Button from '../components/Button';
import Input from '../components/Input';
import Select from '../components/Select';
import ToggleSwitch from '../components/ToggleSwitch'; // Not directly used here, but good to keep in mind for forms
import LoadingSpinner from '../components/LoadingSpinner';
import ErrorMessage from '../components/ErrorMessage';
import ListItem from '../components/ListItem';
import Modal from '../components/Modal';
import { Link } from 'react-router-dom';

// --- Helper Functions ---
const generateUniqueId = () => `item-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;
const formatPrice = (price) => `₹${price.toLocaleString('en-IN')}`;
const formatOdometer = (km) => `${km.toLocaleString('en-IN')} km`;
const formatPostedDate = (isoString) => {
  const date = new Date(isoString);
  const now = new Date();
  const diffTime = Math.abs(now - date);
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

  if (diffDays === 0) return 'Today';
  if (diffDays === 1) return 'Yesterday';
  if (diffDays < 7) return `${diffDays} days ago`;
  return date.toLocaleDateString('en-IN', { year: 'numeric', month: 'short', day: 'numeric' });
};

// --- Dummy Data (Simulated Backend for Marketplace) ---
// IMPORTANT: These are now *initial* dummy data. The actual data will be generated by AI.
// These serve as examples for the AI to learn from or as fallbacks.

// Used Listings (Bikes & Gear/Accessories)
const initialUsedListings = [
  {
    id: generateUniqueId(),
    type: 'bike',
    title: '2021 Royal Enfield Himalayan (Excellent Condition)',
    description: 'Well-maintained Himalayan, perfect for touring and off-roading. Single owner, regularly serviced. Selling due to upgrade.',
    price: 185000,
    make: 'Royal Enfield',
    model: 'Himalayan',
    year: 2021,
    odometer: 15000,
    condition: 'Excellent',
    location: 'Bengaluru',
    imageUrl: 'https://placehold.co/300x200/FFD700/000000?text=Himalayan',
    sellerId: 'user123',
    sellerName: 'RiderJoe',
    postedDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 5).toISOString(), // 5 days ago
    features: ['ABS', 'Dual Sport Tires', 'Crash Guards', 'Top Box'],
  },
  {
    id: generateUniqueId(),
    type: 'bike',
    title: '2019 KTM 390 Duke (Sporty Ride)',
    description: 'Aggressive street naked, great for city commutes and weekend fun. Minor scratches, well-serviced. New tires.',
    price: 190000,
    make: 'KTM',
    model: '390 Duke',
    year: 2019,
    odometer: 22000,
    condition: 'Good',
    location: 'Mumbai',
    imageUrl: 'https://placehold.co/300x200/FFA500/000000?text=Duke390',
    sellerId: 'user456',
    sellerName: 'SpeedDemon',
    postedDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 10).toISOString(), // 10 days ago
    features: ['ABS', 'Quick Shifter', 'LED Headlight', 'Adjustable Levers'],
  },
  {
    id: generateUniqueId(),
    type: 'gear',
    title: 'Riding Jacket (Size L, Barely Used)',
    description: 'Durable riding jacket with CE armor. Used only a few times. Selling as it\'s slightly big for me. Brand: Rynox.',
    price: 8000,
    category: 'Jacket',
    condition: 'Like New',
    location: 'Delhi',
    imageUrl: 'https://placehold.co/300x200/8A2BE2/FFFFFF?text=Jacket',
    sellerId: 'user789',
    sellerName: 'GearHead',
    postedDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2).toISOString(), // 2 days ago
    brand: 'Rynox',
    size: 'L',
  },
  {
    id: generateUniqueId(),
    type: 'bike',
    title: '2022 Honda CB350 H\'ness (Retro Classic)',
    description: 'Smooth ride, retro looks. Ideal for city and highway cruising. No accidents, clean papers. Recently serviced.',
    price: 170000,
    make: 'Honda',
    model: 'CB350',
    year: 2022,
    odometer: 8000,
    condition: 'Excellent',
    location: 'Chennai',
    imageUrl: 'https://placehold.co/300x200/008080/FFFFFF?text=CB350',
    sellerId: 'user101',
    sellerName: 'ClassicRider',
    postedDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7).toISOString(), // 7 days ago
    features: ['ABS', 'Traction Control', 'Bluetooth Connectivity', 'LED Lighting'],
  },
  {
    id: generateUniqueId(),
    type: 'gear',
    title: 'Full Face Helmet (Size M, Brand New)',
    description: 'Unused full face helmet, ISI certified. Bought as a spare, not needed now. Comes with clear and tinted visor.',
    price: 4500,
    category: 'Helmet',
    condition: 'Brand New',
    location: 'Hyderabad',
    imageUrl: 'https://placehold.co/300x200/4682B4/FFFFFF?text=Helmet',
    sellerId: 'user123',
    sellerName: 'RiderJoe',
    postedDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 1).toISOString(), // 1 day ago
    brand: 'Vega',
    size: 'M',
  },
  {
    id: generateUniqueId(),
    type: 'accessory',
    title: 'Mobile Holder for Handlebar',
    description: 'Universal mobile holder, fits most bikes. Secure grip, easy to install. Used for 3 months.',
    price: 750,
    category: 'Mobile Holder',
    condition: 'Good',
    location: 'Pune',
    imageUrl: 'https://placehold.co/300x200/FF6347/FFFFFF?text=MobileHolder',
    sellerId: 'user101',
    sellerName: 'ClassicRider',
    postedDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 3).toISOString(), // 3 days ago
  },
  {
    id: generateUniqueId(),
    type: 'part',
    title: 'Apollo Alpha H1 Front Tire (110/70-17)',
    description: 'Brand new, unused front tire for sport bikes. Selling due to wrong size order.',
    price: 3500,
    category: 'Tire',
    condition: 'Brand New',
    location: 'Bengaluru',
    imageUrl: 'https://placehold.co/300x200/4CAF50/FFFFFF?text=Tire',
    sellerId: 'user456',
    sellerName: 'SpeedDemon',
    postedDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 6).toISOString(), // 6 days ago
  },
];

// New Bike Models (Comprehensive BikeDekho-like data)
const initialNewBikeModels = [
  {
    id: 'new-bike-1',
    make: 'Royal Enfield',
    model: 'Hunter 350',
    price: 150000, // Ex-showroom
    engineCC: 349,
    powerHP: 20.2,
    torqueNM: 27,
    mileage: 36.2, // kmpl
    type: 'Roadster',
    imageUrl: 'https://placehold.co/300x200/8B0000/FFFFFF?text=Hunter350',
    description: 'A modern classic roadster, agile and fun for city rides. Combines retro charm with modern performance.',
    features: ['Dual Channel ABS', 'Tripper Navigation (optional)', 'USB Charging Port', 'Halogen Headlamp with LED DRL'],
    reviews: 4.5, // out of 5
    colors: ['Rebel Blue', 'Dapper Grey', 'Factory Black'],
    topSpeed: 114, // kmph
    fuelTank: 13, // litres
    weight: 181, // kg
  },
  {
    id: 'new-bike-2',
    make: 'Bajaj',
    model: 'Pulsar NS200',
    price: 140000,
    engineCC: 199.5,
    powerHP: 24.5,
    torqueNM: 18.7,
    mileage: 35,
    type: 'Naked Sport',
    imageUrl: 'https://placehold.co/300x200/00008B/FFFFFF?text=NS200',
    description: 'Aggressive styling with a powerful engine, ideal for performance enthusiasts. Liquid-cooled, triple spark DTS-i engine.',
    features: ['Liquid Cooled Engine', 'Perimeter Frame', 'Underbelly Exhaust', 'Single Channel ABS'],
    reviews: 4.2,
    colors: ['Metallic Pearl White', 'Satin Blue', 'Graphite Black'],
    topSpeed: 125,
    fuelTank: 12,
    weight: 156,
  },
  {
    id: 'new-bike-3',
    make: 'TVS',
    model: 'Apache RTR 160 4V',
    price: 125000,
    engineCC: 159.7,
    powerHP: 17.3,
    torqueNM: 14.7,
    mileage: 45,
    type: 'Commuter Sport',
    imageUrl: 'https://placehold.co/300x200/228B22/FFFFFF?text=Apache160',
    description: 'Feature-rich and refined, offering a balance of performance and efficiency. Race-tuned fuel injection.',
    features: ['SmartXonnect (Bluetooth)', 'Glide Through Technology', 'LED Headlamp', 'Dual Tone Seat'],
    reviews: 4.3,
    colors: ['Racing Red', 'Metallic Blue', 'Knight Black'],
    topSpeed: 113,
    fuelTank: 12,
    weight: 146,
  },
  {
    id: 'new-bike-4',
    make: 'Hero',
    model: 'Xpulse 200 4V',
    price: 135000,
    engineCC: 199.6,
    powerHP: 19.1,
    torqueNM: 17.35,
    mileage: 40,
    type: 'Adventure',
    imageUrl: 'https://placehold.co/300x200/FFD700/000000?text=Xpulse200',
    description: 'India\'s most affordable adventure bike. Perfect for off-roading and long tours.',
    features: ['Long Travel Suspension', 'High Ground Clearance', 'Single Channel ABS', 'Bluetooth Connectivity'],
    reviews: 4.6,
    colors: ['Trail Blue', 'Blitz Blue', 'Red Raid'],
    topSpeed: 115,
    fuelTank: 13,
    weight: 158,
  },
];

// Service Providers (More detailed data)
const initialServiceProviders = [
  {
    id: 'service-1',
    name: 'Pro Bike Service Center',
    type: 'Maintenance & Repair',
    location: 'Near MG Road, Bengaluru',
    rating: 4.8,
    contact: '+91 9876543210',
    description: 'Expert mechanics for all major bike brands. Quick service and genuine parts. Specializes in engine overhauls and electrical diagnostics.',
    servicesOffered: ['General Service', 'Engine Repair', 'Brake Service', 'Electrical Work', 'Tire Change'],
    workingHours: 'Mon-Sat: 9 AM - 7 PM',
    address: '123, Main Road, MG Road, Bengaluru, Karnataka',
    imageUrl: 'https://placehold.co/300x200/4CAF50/FFFFFF?text=ServiceCenter',
  },
  {
    id: 'service-2',
    name: 'Custom Paint & Mods',
    type: 'Customization',
    location: 'Andheri, Mumbai',
    rating: 4.5,
    contact: '+91 9988776655',
    description: 'Transform your bike with custom paint jobs, wraps, and performance mods. From subtle changes to complete overhauls.',
    servicesOffered: ['Custom Paint', 'Vinyl Wraps', 'Performance Exhausts', 'Suspension Upgrades'],
    workingHours: 'Mon-Fri: 10 AM - 6 PM',
    address: 'Shop 5, XYZ Complex, Andheri West, Mumbai, Maharashtra',
    imageUrl: 'https://placehold.co/300x200/8A2BE2/FFFFFF?text=CustomMods',
  },
  {
    id: 'service-3',
    name: 'Bike Rentals & Tours',
    type: 'Rentals',
    location: 'Leh, Ladakh',
    rating: 4.9,
    contact: '+91 7766554433',
    description: 'Rent Royal Enfields and other adventure bikes for your Ladakh trip. Guided tours also available.',
    servicesOffered: ['Bike Rentals', 'Guided Tours', 'Luggage Carrier Rental'],
    workingHours: 'Everyday: 7 AM - 9 PM',
    address: 'Near Main Market, Leh, Ladakh',
    imageUrl: 'https://placehold.co/300x200/FFD700/000000?text=Rentals',
  },
];

// --- Options for Filters and Forms ---
const bikeMakes = [
  { value: '', label: 'Any Make' },
  { value: 'Royal Enfield', label: 'Royal Enfield' },
  { value: 'KTM', label: 'KTM' },
  { value: 'Honda', label: 'Honda' },
  { value: 'Bajaj', label: 'Bajaj' },
  { value: 'TVS', label: 'TVS' },
  { value: 'Hero', label: 'Hero' },
  { value: 'Other', label: 'Other' },
];

// Dynamic models based on selected make
const getBikeModelsByMake = (make) => {
  const modelsMap = {
    'Royal Enfield': [{ value: 'Himalayan', label: 'Himalayan' }, { value: 'Classic 350', label: 'Classic 350' }, { value: 'Hunter 350', label: 'Hunter 350' }, { value: 'Meteor 350', label: 'Meteor 350' }],
    'KTM': [{ value: '390 Duke', label: '390 Duke' }, { value: '200 Duke', label: '200 Duke' }, { value: 'RC 390', label: 'RC 390' }, { value: 'Adventure 390', label: 'Adventure 390' }],
    'Honda': [{ value: 'CB350', label: 'CB350' }, { value: 'CBR650R', label: 'CBR650R' }, { value: 'Hness CB350', label: 'Hness CB350' }],
    'Bajaj': [{ value: 'Pulsar NS200', label: 'Pulsar NS200' }, { value: 'Dominar 400', label: 'Dominar 400' }, { value: 'Pulsar N160', label: 'Pulsar N160' }],
    'TVS': [{ value: 'Apache RTR 160 4V', label: 'Apache RTR 160 4V' }, { value: 'Apache RR 310', label: 'Apache RR 310' }, { value: 'Ronin', label: 'Ronin' }],
    'Hero': [{ value: 'Xpulse 200 4V', label: 'Xpulse 200 4V' }, { value: 'Splendor Plus', label: 'Splendor Plus' }],
    'Other': [{ value: 'Other', label: 'Other' }],
  };
  return modelsMap[make] || [];
};


const itemTypes = [
  { value: '', label: 'All Types' },
  { value: 'bike', label: 'Motorcycle' },
  { value: 'gear', label: 'Riding Gear' },
  { value: 'accessory', label: 'Accessory' },
  { value: 'part', label: 'Part' },
  { value: 'other', label: 'Other' },
];

const gearCategories = [
  { value: '', label: 'Any Category' },
  { value: 'Jacket', label: 'Jacket' },
  { value: 'Helmet', label: 'Helmet' },
  { value: 'Gloves', label: 'Gloves' },
  { value: 'Pants', label: 'Pants' },
  { value: 'Boots', label: 'Boots' },
  { value: 'Armor', label: 'Armor' },
  { value: 'Rain Gear', label: 'Rain Gear' },
  { value: 'Luggage', label: 'Luggage' },
  { value: 'Other', label: 'Other' },
];

const itemConditions = [
  { value: '', label: 'Any Condition' },
  { value: 'Brand New', label: 'Brand New' },
  { value: 'Like New', label: 'Like New' },
  { value: 'Excellent', label: 'Excellent' },
  { value: 'Good', label: 'Good' },
  { value: 'Fair', label: 'Fair' },
  { value: 'Used', label: 'Used' },
  { value: 'Parts Only', label: 'Parts Only' },
];

const serviceTypes = [
  { value: '', label: 'All Types' },
  { value: 'Maintenance & Repair', label: 'Maintenance & Repair' },
  { value: 'Customization', label: 'Customization' },
  { value: 'Rentals', label: 'Rentals' },
  { value: 'Towing', label: 'Towing & Roadside' },
  { value: 'Training', label: 'Riding Training' },
  { value: 'Detailing', label: 'Detailing' },
  { value: 'Insurance', label: 'Insurance & Documentation' },
  { value: 'Other', label: 'Other' },
];

const locations = [ // Simplified list of major Indian cities for location filter
  { value: '', label: 'Any Location' },
  { value: 'Bengaluru', label: 'Bengaluru' },
  { value: 'Mumbai', label: 'Mumbai' },
  { value: 'Delhi', label: 'Delhi' },
  { value: 'Chennai', label: 'Chennai' },
  { value: 'Hyderabad', label: 'Hyderabad' },
  { value: 'Pune', label: 'Pune' },
  { value: 'Kolkata', label: 'Kolkata' },
  { value: 'Ahmedabad', label: 'Ahmedabad' },
  { value: 'Jaipur', label: 'Jaipur' },
  { value: 'Leh', label: 'Leh' },
];


const MarketplacePage = () => {
  const { user, isAuthenticated, isLoadingAuth } = useAuth();
  const { riderProfile, isLoadingRider } = useRider();
  const { vehicleSpecs, isLoadingVehicle, vehicleCondition } = useVehicle(); // Added vehicleCondition

  const [activeTab, setActiveTab] = useState('used'); // 'used', 'new', 'services'

  // --- State for Used Marketplace ---
  const [usedListings, setUsedListings] = useState([]);
  const [usedFilters, setUsedFilters] = useState({
    search: '',
    type: '',
    make: '',
    model: '',
    minPrice: '',
    maxPrice: '',
    condition: '',
    minOdometer: '',
    maxOdometer: '',
    location: '',
  });
  const [isFetchingUsedListings, setIsFetchingUsedListings] = useState(false);
  const [usedListingsError, setUsedListingsError] = useState(null);
  const [selectedUsedListing, setSelectedUsedListing] = useState(null);
  const [showUsedListingModal, setShowUsedListingModal] = useState(false);
  const [showPostUsedListingModal, setShowPostUsedListingModal] = useState(false);
  const [newUsedListingFormData, setNewUsedListingFormData] = useState({
    type: 'bike', // Default to bike
    title: '',
    description: '',
    price: '',
    make: '',
    model: '',
    year: '',
    odometer: '',
    condition: '',
    location: '',
    imageUrl: '',
    category: '', // For gear/accessories
    features: '', // Comma-separated string for bikes
    brand: '', // For gear/accessories
    size: '', // For gear/accessories
  });
  const [newUsedListingFormErrors, setNewUsedListingFormErrors] = useState({});
  const [isPostingUsedListing, setIsPostingUsedListing] = useState(false);
  const [postUsedListingError, setPostUsedListingError] = useState(null);
  const [aiPricingInsight, setAiPricingInsight] = useState(null); // AI pricing for user's item
  const [isGettingPricingInsight, setIsGettingPricingInsight] = useState(false);

  // --- State for New Bikes ---
  const [newBikeModels, setNewBikeModels] = useState([]);
  const [newBikeFilters, setNewBikeFilters] = useState({
    search: '',
    make: '',
    type: '', // e.g., Roadster, Naked Sport, Adventure
    minPrice: '',
    maxPrice: '',
    minEngineCC: '',
    maxEngineCC: '',
    minMileage: '',
    maxMileage: '',
  });
  const [isFetchingNewBikeModels, setIsFetchingNewBikeModels] = useState(false);
  const [newBikeModelsError, setNewBikeModelsError] = useState(null);
  const [selectedNewBike, setSelectedNewBike] = useState(null);
  const [showNewBikeModal, setShowNewBikeModal] = useState(false);
  const [aiNewBikeSuggestions, setAiNewBikeSuggestions] = useState([]); // AI suggestions for new bikes
  const [isGettingNewBikeSuggestions, setIsGettingNewBikeSuggestions] = useState(false);

  // --- State for Services ---
  const [serviceProviders, setServiceProviders] = useState([]);
  const [serviceFilters, setServiceFilters] = useState({
    search: '',
    type: '',
    location: '',
    minRating: '',
  });
  const [isFetchingServices, setIsFetchingServices] = useState(false);
  const [servicesError, setServicesError] = useState(null);
  const [selectedService, setSelectedService] = useState(null);
  const [showServiceModal, setShowServiceModal] = useState(false);

  // --- AI Marketplace Recommendations (General) ---
  const [aiMarketplaceRecommendations, setAiMarketplaceRecommendations] = useState([]);
  const [isGettingMarketplaceRecs, setIsGettingMarketplaceRecs] = useState(false);


  // --- AI Simulation Core Functions ---

  /**
   * Simulates an AI call to generate a list of marketplace items (used bikes/gear/accessories/parts).
   * This replaces static dummy data with dynamic AI-generated content.
   * @param {object} filters - The current search and filter criteria.
   * @param {string} itemType - 'bike', 'gear', 'accessory', 'part', 'other'.
   * @returns {Array<object>} An array of AI-generated marketplace items.
   */
  const generateMarketplaceItems = useCallback(async (filters, itemType) => {
    // This is where the "genuine" AI interaction happens.
    // We'll craft a prompt to Gemini to generate data based on filters.
    // The responseSchema ensures we get structured JSON.
    const prompt = `Generate 5-10 used marketplace listings for a motorcycle app in India.
    The listings should be of type "${itemType}".
    Apply the following filters:
    Search keyword: "${filters.search}"
    Make: "${filters.make}"
    Model: "${filters.model}"
    Min Price: ${filters.minPrice}
    Max Price: ${filters.maxPrice}
    Condition: "${filters.condition}"
    Min Odometer: ${filters.minOdometer}
    Max Odometer: ${filters.maxOdometer}
    Location: "${filters.location}"
    Category (for gear/accessories/parts): "${filters.category || ''}"
    
    Each listing should have:
    - id (unique string)
    - type (e.g., 'bike', 'gear', 'accessory', 'part')
    - title (descriptive)
    - description (detailed, realistic wear/use)
    - price (realistic integer, ₹)
    - make (if type is 'bike')
    - model (if type is 'bike')
    - year (if type is 'bike', realistic range 2010-${new Date().getFullYear()})
    - odometer (if type is 'bike', realistic km)
    - condition (e.g., 'Excellent', 'Good', 'Fair', 'Used', 'Brand New', 'Like New')
    - location (Indian city, e.g., Bengaluru, Mumbai, Delhi)
    - imageUrl (use placehold.co for image, e.g., 'https://placehold.co/300x200/FFD700/000000?text=Bike')
    - sellerId (dummy string)
    - sellerName (dummy name)
    - postedDate (ISO string, realistic recent date)
    - features (array of strings, for bikes)
    - brand (for gear/accessories/parts)
    - size (for gear/accessories, e.g., 'M', 'L', 'XL')

    Ensure the generated data is diverse, realistic, and matches the filters as closely as possible. If a filter is empty, ignore it.
    Provide the response as a JSON array of objects.`;

    const payload = {
      contents: [{ role: "user", parts: [{ text: prompt }] }],
      generationConfig: {
        responseMimeType: "application/json",
        responseSchema: {
          type: "ARRAY",
          items: {
            type: "OBJECT",
            properties: {
              id: { type: "STRING" },
              type: { type: "STRING", enum: ['bike', 'gear', 'accessory', 'part', 'other'] },
              title: { type: "STRING" },
              description: { type: "STRING" },
              price: { type: "NUMBER" },
              make: { type: "STRING" },
              model: { type: "STRING" },
              year: { type: "NUMBER" },
              odometer: { type: "NUMBER" },
              condition: { type: "STRING", enum: ['Brand New', 'Like New', 'Excellent', 'Good', 'Fair', 'Used', 'Parts Only'] },
              location: { type: "STRING" },
              imageUrl: { type: "STRING" },
              sellerId: { type: "STRING" },
              sellerName: { type: "STRING" },
              postedDate: { type: "STRING" },
              features: { type: "ARRAY", items: { type: "STRING" } },
              category: { type: "STRING" },
              brand: { type: "STRING" },
              size: { type: "STRING" },
            },
            required: ["id", "type", "title", "description", "price", "condition", "location", "imageUrl", "sellerId", "sellerName", "postedDate"]
          }
        }
      }
    };

    const apiKey = ""; // Canvas will provide this
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

    try {
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      const result = await response.json();

      if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {
        const jsonString = result.candidates[0].content.parts[0].text;
        // The LLM might return markdown code block, so we need to parse it
        const cleanedJsonString = jsonString.startsWith('```json') ? jsonString.substring(7, jsonString.lastIndexOf('```')) : jsonString;
        const parsedData = JSON.parse(cleanedJsonString);
        console.log("AI Generated Marketplace Items:", parsedData);
        // Ensure IDs are unique and dates are valid (LLM might sometimes generate duplicates or invalid dates)
        return parsedData.map(item => ({
          ...item,
          id: generateUniqueId(), // Ensure unique ID
          postedDate: new Date(item.postedDate || Date.now()).toISOString(), // Ensure valid date
          imageUrl: item.imageUrl || `https://placehold.co/300x200/CCCCCC/000000?text=${item.type === 'bike' ? 'Bike' : item.type.toUpperCase()}`,
          features: Array.isArray(item.features) ? item.features : (typeof item.features === 'string' ? item.features.split(',').map(f => f.trim()).filter(Boolean) : []),
        }));
      } else {
        console.warn("AI did not return valid content for marketplace items:", result);
        return [];
      }
    } catch (apiError) {
      console.error("Error calling Gemini API for marketplace items:", apiError);
      return [];
    }
  }, []);

  /**
   * Simulates an AI call to generate a list of new bike models.
   * @param {object} filters - The current search and filter criteria.
   * @returns {Array<object>} An array of AI-generated new bike models.
   */
  const generateNewBikeModels = useCallback(async (filters) => {
    const prompt = `Generate 5-10 new motorcycle models for a bike marketplace in India.
    Apply the following filters:
    Search keyword: "${filters.search}"
    Make: "${filters.make}"
    Type (e.g., Roadster, Naked Sport, Adventure): "${filters.type}"
    Min Price: ${filters.minPrice}
    Max Price: ${filters.maxPrice}
    Min Engine CC: ${filters.minEngineCC}
    Max Engine CC: ${filters.maxEngineCC}
    Min Mileage: ${filters.minMileage}
    Max Mileage: ${filters.maxMileage}

    Each model should have:
    - id (unique string)
    - make (e.g., Royal Enfield, KTM)
    - model (e.g., Hunter 350, 390 Duke)
    - price (realistic integer, ₹ ex-showroom)
    - engineCC (realistic integer)
    - powerHP (realistic float)
    - torqueNM (realistic float)
    - mileage (realistic float, kmpl)
    - type (e.g., 'Roadster', 'Naked Sport', 'Adventure', 'Cruiser', 'Commuter')
    - imageUrl (use placehold.co for image)
    - description (detailed, compelling)
    - features (array of strings, e.g., 'Dual Channel ABS', 'Tripper Navigation')
    - reviews (realistic float, 3.0-5.0)
    - colors (array of strings)
    - topSpeed (realistic integer, kmph)
    - fuelTank (realistic integer, litres)
    - weight (realistic integer, kg)

    Ensure the generated data is diverse, realistic, and matches the filters as closely as possible. If a filter is empty, ignore it.
    Provide the response as a JSON array of objects.`;

    const payload = {
      contents: [{ role: "user", parts: [{ text: prompt }] }],
      generationConfig: {
        responseMimeType: "application/json",
        responseSchema: {
          type: "ARRAY",
          items: {
            type: "OBJECT",
            properties: {
              id: { type: "STRING" },
              make: { type: "STRING" },
              model: { type: "STRING" },
              price: { type: "NUMBER" },
              engineCC: { type: "NUMBER" },
              powerHP: { type: "NUMBER" },
              torqueNM: { type: "NUMBER" },
              mileage: { type: "NUMBER" },
              type: { type: "STRING" },
              imageUrl: { type: "STRING" },
              description: { type: "STRING" },
              features: { type: "ARRAY", items: { type: "STRING" } },
              reviews: { type: "NUMBER" },
              colors: { type: "ARRAY", items: { type: "STRING" } },
              topSpeed: { type: "NUMBER" },
              fuelTank: { type: "NUMBER" },
              weight: { type: "NUMBER" },
            },
            required: ["id", "make", "model", "price", "engineCC", "powerHP", "torqueNM", "mileage", "type", "imageUrl", "description", "features", "reviews", "colors", "topSpeed", "fuelTank", "weight"]
          }
        }
      }
    };

    const apiKey = ""; // Canvas will provide this
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

    try {
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      const result = await response.json();

      if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {
        const jsonString = result.candidates[0].content.parts[0].text;
        const cleanedJsonString = jsonString.startsWith('```json') ? jsonString.substring(7, jsonString.lastIndexOf('```')) : jsonString;
        const parsedData = JSON.parse(cleanedJsonString);
        console.log("AI Generated New Bike Models:", parsedData);
        return parsedData.map(item => ({
          ...item,
          id: generateUniqueId(), // Ensure unique ID
          imageUrl: item.imageUrl || `https://placehold.co/300x200/CCCCCC/000000?text=${item.model}`,
          features: Array.isArray(item.features) ? item.features : (typeof item.features === 'string' ? item.features.split(',').map(f => f.trim()).filter(Boolean) : []),
          colors: Array.isArray(item.colors) ? item.colors : (typeof item.colors === 'string' ? item.colors.split(',').map(c => c.trim()).filter(Boolean) : []),
        }));
      } else {
        console.warn("AI did not return valid content for new bike models:", result);
        return [];
      }
    } catch (apiError) {
      console.error("Error calling Gemini API for new bike models:", apiError);
      return [];
    }
  }, []);

  /**
   * Simulates an AI call to generate a list of service providers.
   * @param {object} filters - The current search and filter criteria.
   * @returns {Array<object>} An array of AI-generated service providers.
   */
  const generateServiceProviders = useCallback(async (filters) => {
    const prompt = `Generate 5-10 motorcycle service providers for a bike marketplace in India.
    Apply the following filters:
    Search keyword: "${filters.search}"
    Type: "${filters.type}"
    Location: "${filters.location}"
    Min Rating: ${filters.minRating}

    Each provider should have:
    - id (unique string)
    - name (business name)
    - type (e.g., 'Maintenance & Repair', 'Customization', 'Rentals')
    - location (Indian city/area)
    - rating (realistic float, 3.0-5.0)
    - contact (dummy phone number)
    - description (detailed, professional)
    - servicesOffered (array of strings)
    - workingHours (e.g., 'Mon-Sat: 9 AM - 7 PM')
    - address (detailed street address)
    - imageUrl (use placehold.co for image)

    Ensure the generated data is diverse, realistic, and matches the filters as closely as possible. If a filter is empty, ignore it.
    Provide the response as a JSON array of objects.`;

    const payload = {
      contents: [{ role: "user", parts: [{ text: prompt }] }],
      generationConfig: {
        responseMimeType: "application/json",
        responseSchema: {
          type: "ARRAY",
          items: {
            type: "OBJECT",
            properties: {
              id: { type: "STRING" },
              name: { type: "STRING" },
              type: { type: "STRING", enum: ['Maintenance & Repair', 'Customization', 'Rentals', 'Towing', 'Training', 'Detailing', 'Insurance', 'Other'] },
              location: { type: "STRING" },
              rating: { type: "NUMBER" },
              contact: { type: "STRING" },
              description: { type: "STRING" },
              servicesOffered: { type: "ARRAY", items: { type: "STRING" } },
              workingHours: { type: "STRING" },
              address: { type: "STRING" },
              imageUrl: { type: "STRING" },
            },
            required: ["id", "name", "type", "location", "rating", "contact", "description", "servicesOffered", "workingHours", "address", "imageUrl"]
          }
        }
      }
    };

    const apiKey = ""; // Canvas will provide this
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

    try {
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      const result = await response.json();

      if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {
        const jsonString = result.candidates[0].content.parts[0].text;
        const cleanedJsonString = jsonString.startsWith('```json') ? jsonString.substring(7, jsonString.lastIndexOf('```')) : jsonString;
        const parsedData = JSON.parse(cleanedJsonString);
        console.log("AI Generated Service Providers:", parsedData);
        return parsedData.map(item => ({
          ...item,
          id: generateUniqueId(), // Ensure unique ID
          imageUrl: item.imageUrl || `https://placehold.co/300x200/CCCCCC/000000?text=Service`,
          servicesOffered: Array.isArray(item.servicesOffered) ? item.servicesOffered : (typeof item.servicesOffered === 'string' ? item.servicesOffered.split(',').map(s => s.trim()).filter(Boolean) : []),
        }));
      } else {
        console.warn("AI did not return valid content for service providers:", result);
        return [];
      }
    } catch (apiError) {
      console.error("Error calling Gemini API for service providers:", apiError);
      return [];
    }
  }, []);


  // --- Effects for Data Fetching (Now AI-Driven) ---

  // Fetch Used Listings (AI-driven)
  useEffect(() => {
    const fetchAndGenerateUsedListings = async () => {
      setIsFetchingUsedListings(true);
      setUsedListingsError(null);
      try {
        const generated = await generateMarketplaceItems(usedFilters, usedFilters.type || 'bike'); // Default to bike if no type filter
        setUsedListings(generated.length > 0 ? generated : initialUsedListings); // Fallback to initial if AI generates nothing
      } catch (err) {
        console.error('Failed to generate/fetch used listings:', err);
        setUsedListingsError('Failed to load used items. Please try again.');
        setUsedListings(initialUsedListings); // Fallback on error
      } finally {
        setIsFetchingUsedListings(false);
      }
    };
    fetchAndGenerateUsedListings();
  }, [usedFilters, generateMarketplaceItems]); // Re-fetch/generate when filters change

  // Fetch New Bike Models (AI-driven)
  useEffect(() => {
    const fetchAndGenerateNewBikeModels = async () => {
      setIsFetchingNewBikeModels(true);
      setNewBikeModelsError(null);
      try {
        const generated = await generateNewBikeModels(newBikeFilters);
        setNewBikeModels(generated.length > 0 ? generated : initialNewBikeModels); // Fallback
      } catch (err) {
        console.error('Failed to generate/fetch new bike models:', err);
        setNewBikeModelsError('Failed to load new bike models. Please try again.');
        setNewBikeModels(initialNewBikeModels); // Fallback
      } finally {
        setIsFetchingNewBikeModels(false);
      }
    };
    fetchAndGenerateNewBikeModels();
  }, [newBikeFilters, generateNewBikeModels]); // Re-fetch/generate when filters change

  // Fetch Service Providers (AI-driven)
  useEffect(() => {
    const fetchAndGenerateServices = async () => {
      setIsFetchingServices(true);
      setServicesError(null);
      try {
        const generated = await generateServiceProviders(serviceFilters);
        setServiceProviders(generated.length > 0 ? generated : initialServiceProviders); // Fallback
      } catch (err) {
        console.error('Failed to generate/fetch service providers:', err);
        setServicesError('Failed to load service providers. Please try again.');
        setServiceProviders(initialServiceProviders); // Fallback
      } finally {
        setIsFetchingServices(false);
      }
    };
    fetchAndGenerateServices();
  }, [serviceFilters, generateServiceProviders]); // Re-fetch/generate when filters change


  // --- AI Integration Effects (Simulated) ---

  // AI Marketplace Recommendations (based on rider/vehicle profile)
  useEffect(() => {
    const getMarketplaceRecs = async () => {
      // Only generate if authenticated and rider/vehicle data is available
      if (!isAuthenticated || isLoadingRider || isLoadingVehicle || !riderProfile.name || !vehicleSpecs.make) {
        setAiMarketplaceRecommendations([]); // Clear if no user/data
        return;
      }
      setIsGettingMarketplaceRecs(true);
      try {
        await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate AI processing
        const recs = [];
        // More sophisticated AI logic here based on combined rider and vehicle data
        // This would ideally be a call to your backend AI model
        if (riderProfile.ridingStyle === 'Aggressive' || riderProfile.desiredPace === 'fast') {
          recs.push(`Given your ${riderProfile.ridingStyle} style, consider performance parts or sport riding gear.`);
        }
        if (riderProfile.ridingStyle === 'Scenic' || riderProfile.terrainAdaptability === 'high') {
          recs.push(`For scenic rides and varied terrains, adventure touring bikes or dual-sport tires might be ideal.`);
        }
        if (vehicleSpecs.make && vehicleSpecs.model) {
          recs.push(`Looking for compatible accessories for your ${vehicleSpecs.make} ${vehicleSpecs.model}?`);
          // More specific recommendations based on vehicle condition
          if (vehicleSpecs.typicalTireLifespanKm && vehicleCondition.currentOdometer - vehicleCondition.lastTireChangeKm > vehicleSpecs.typicalTireLifespanKm * 0.8) {
            recs.push('Your tires might be nearing end-of-life. Check out new tire listings!');
          }
          if (vehicleSpecs.typicalBrakePadLifespanKm && vehicleCondition.currentOdometer - vehicleCondition.lastBrakePadChangeKm > vehicleSpecs.typicalBrakePadLifespanKm * 0.8) {
            recs.push('Brake pads might need replacement soon. Find new ones here!');
          }
        }
        if (riderProfile.recentFatigue === 'high') {
          recs.push('Consider comfortable touring seats or ergonomic accessories for longer rides.');
        }
        if (riderProfile.pillion) {
          recs.push('Explore comfortable pillion seats or backrests for your co-rider.');
        }
        if (riderProfile.hasHardLuggage) {
          recs.push('Looking for additional luggage solutions or touring accessories?');
        }

        if (recs.length === 0) {
          recs.push('Explore a wide range of motorcycles, gear, and services tailored for Indian riders!');
        }

        setAiMarketplaceRecommendations(recs);
      } catch (err) {
        console.error('Error getting marketplace recommendations:', err);
      } finally {
        setIsGettingMarketplaceRecs(false);
      }
    };
    getMarketplaceRecs();
  }, [isAuthenticated, riderProfile, vehicleSpecs, vehicleCondition, isLoadingRider, isLoadingVehicle]);

  // AI New Bike Suggestions (based on rider preferences)
  useEffect(() => {
    const getNewBikeSuggestions = async () => {
      if (!isAuthenticated || isLoadingRider || !riderProfile.name) {
        setAiNewBikeSuggestions([]);
        return;
      }
      setIsGettingNewBikeSuggestions(true);
      try {
        await new Promise(resolve => setTimeout(resolve, 1200)); // Simulate AI processing
        const suggestions = [];

        // Suggest based on desired pace
        if (riderProfile.desiredPace === 'fast' || riderProfile.ridingStyle === 'Aggressive') {
          suggestions.push('For a fast and aggressive pace, consider sportier naked bikes like the KTM 390 Duke or Bajaj Pulsar NS200.');
        } else if (riderProfile.desiredPace === 'relaxed' || riderProfile.ridingStyle === 'Scenic') {
          suggestions.push('If you prefer relaxed and scenic rides, classic roadsters like Royal Enfield Hunter 350 or Honda CB350 might suit you.');
        } else {
          suggestions.push('For a balanced ride, check out versatile options like TVS Apache RTR 160 4V.');
        }

        // Suggest based on expected terrain
        if (riderProfile.expectedTerrain === 'off-road' || riderProfile.terrainAdaptability === 'high') {
          suggestions.push('For off-road adventures, the Hero Xpulse 200 4V is a great value proposition.');
        }

        // Suggest based on comfort priority
        if (riderProfile.comfortPriority === 'comfort') {
          suggestions.push('Prioritizing comfort? Cruisers or bikes with adjustable suspension could be a good fit.');
        }

        // Suggest based on budget (simple estimation)
        if (riderProfile.preferredDailyDistance < 100) { // Assuming shorter daily distances might mean lower budget for city bikes
          suggestions.push('For city commutes and efficiency, consider bikes around ₹1.2 - ₹1.5 Lakh ex-showroom.');
        } else {
          suggestions.push('For longer rides and highway cruising, explore options above ₹1.5 Lakh with good engine capacity.');
        }

        setAiNewBikeSuggestions(suggestions);
      } catch (err) {
        console.error('Error getting new bike suggestions:', err);
      } finally {
        setIsGettingNewBikeSuggestions(false);
      }
    };
    getNewBikeSuggestions();
  }, [isAuthenticated, riderProfile, isLoadingRider]);


  // --- Filtering Logic (Client-Side, using useMemo for performance) ---

  // Filtered Used Listings
  const filteredUsedListings = useMemo(() => {
    let temp = usedListings;

    if (usedFilters.search) {
      temp = temp.filter(item =>
        item.title.toLowerCase().includes(usedFilters.search.toLowerCase()) ||
        item.description.toLowerCase().includes(usedFilters.search.toLowerCase()) ||
        (item.make && item.make.toLowerCase().includes(usedFilters.search.toLowerCase())) ||
        (item.model && item.model.toLowerCase().includes(usedFilters.search.toLowerCase())) ||
        (item.category && item.category.toLowerCase().includes(usedFilters.search.toLowerCase())) ||
        (item.brand && item.brand.toLowerCase().includes(usedFilters.search.toLowerCase()))
      );
    }
    if (usedFilters.type) {
      temp = temp.filter(item => item.type === usedFilters.type);
    }
    if (usedFilters.make) {
      temp = temp.filter(item => item.make === usedFilters.make);
    }
    if (usedFilters.model) { // Model filter is only relevant if a make is selected
      temp = temp.filter(item => item.model === usedFilters.model);
    }
    if (usedFilters.minPrice) {
      temp = temp.filter(item => item.price >= parseFloat(usedFilters.minPrice));
    }
    if (usedFilters.maxPrice) {
      temp = temp.filter(item => item.price <= parseFloat(usedFilters.maxPrice));
    }
    if (usedFilters.condition) {
      temp = temp.filter(item => item.condition === usedFilters.condition);
    }
    if (usedFilters.minOdometer) {
      temp = temp.filter(item => item.odometer >= parseFloat(usedFilters.minOdometer));
    }
    if (usedFilters.maxOdometer) {
      temp = temp.filter(item => item.odometer <= parseFloat(usedFilters.maxOdometer));
    }
    if (usedFilters.location) {
      temp = temp.filter(item => item.location.toLowerCase().includes(usedFilters.location.toLowerCase()));
    }

    return temp;
  }, [usedListings, usedFilters]);

  // Filtered New Bike Models
  const filteredNewBikeModels = useMemo(() => {
    let temp = newBikeModels;

    if (newBikeFilters.search) {
      temp = temp.filter(model =>
        model.make.toLowerCase().includes(newBikeFilters.search.toLowerCase()) ||
        model.model.toLowerCase().includes(newBikeFilters.search.toLowerCase()) ||
        model.description.toLowerCase().includes(newBikeFilters.search.toLowerCase())
      );
    }
    if (newBikeFilters.make) {
      temp = temp.filter(model => model.make === newBikeFilters.make);
    }
    if (newBikeFilters.type) {
      temp = temp.filter(model => model.type === newBikeFilters.type);
    }
    if (newBikeFilters.minPrice) {
      temp = temp.filter(model => model.price >= parseFloat(newBikeFilters.minPrice));
    }
    if (newBikeFilters.maxPrice) {
      temp = temp.filter(model => model.price <= parseFloat(newBikeFilters.maxPrice));
    }
    if (newBikeFilters.minEngineCC) {
      temp = temp.filter(model => model.engineCC >= parseFloat(newBikeFilters.minEngineCC));
    }
    if (newBikeFilters.maxEngineCC) {
      temp = temp.filter(model => model.engineCC <= parseFloat(newBikeFilters.maxEngineCC));
    }
    if (newBikeFilters.minMileage) {
      temp = temp.filter(model => model.mileage >= parseFloat(newBikeFilters.minMileage));
    }
    if (newBikeFilters.maxMileage) {
      temp = temp.filter(model => model.mileage <= parseFloat(newBikeFilters.maxMileage));
    }
    return temp;
  }, [newBikeModels, newBikeFilters]);

  // Filtered Service Providers
  const filteredServiceProviders = useMemo(() => {
    let temp = serviceProviders;

    if (serviceFilters.search) {
      temp = temp.filter(provider =>
        provider.name.toLowerCase().includes(serviceFilters.search.toLowerCase()) ||
        provider.description.toLowerCase().includes(serviceFilters.search.toLowerCase()) ||
        provider.location.toLowerCase().includes(serviceFilters.search.toLowerCase()) ||
        provider.type.toLowerCase().includes(serviceFilters.search.toLowerCase())
      );
    }
    if (serviceFilters.type) {
      temp = temp.filter(provider => provider.type === serviceFilters.type);
    }
    if (serviceFilters.location) {
      temp = temp.filter(provider => provider.location.toLowerCase().includes(serviceFilters.location.toLowerCase()));
    }
    if (serviceFilters.minRating) {
      temp = temp.filter(provider => provider.rating >= parseFloat(serviceFilters.minRating));
    }
    return temp;
  }, [serviceProviders, serviceFilters]);


  // --- Handlers for UI Interactions ---

  // Tab change
  const handleTabChange = (tab) => setActiveTab(tab);

  // Filter changes (generic handler for all filter states)
  const handleFilterChange = (setter) => (e) => {
    const { name, value } = e.target;
    setter(prev => ({ ...prev, [name]: value }));
  };

  // View Details (Modals)
  const handleViewUsedListingDetails = useCallback((listing) => {
    setSelectedUsedListing(listing);
    setShowUsedListingModal(true);
  }, []);

  const handleCloseUsedListingModal = useCallback(() => {
    setShowUsedListingModal(false);
    setSelectedUsedListing(null);
  }, []);

  const handleViewNewBikeDetails = useCallback((bike) => {
    setSelectedNewBike(bike);
    setShowNewBikeModal(true);
  }, []);

  const handleCloseNewBikeModal = useCallback(() => {
    setShowNewBikeModal(false);
    setSelectedNewBike(null);
  }, []);

  const handleViewServiceDetails = useCallback((service) => {
    setSelectedService(service);
    setShowServiceModal(true);
  }, []);

  const handleCloseServiceModal = useCallback(() => {
    setShowServiceModal(false);
    setSelectedService(null);
  }, []);

  // New Listing Form Handlers
  const handleNewUsedListingChange = (e) => {
    const { name, value } = e.target;
    setNewUsedListingFormData(prev => ({ ...prev, [name]: value }));
    if (newUsedListingFormErrors[name]) {
      setNewUsedListingFormErrors(prev => ({ ...prev, [name]: '' }));
    }
    // Reset AI pricing insight if core bike details change
    if (name === 'make' || name === 'model' || name === 'year' || name === 'odometer') {
      setAiPricingInsight(null);
    }
  };

  const validateNewUsedListingForm = useCallback(() => {
    const errors = {};
    if (!newUsedListingFormData.title.trim()) errors.title = 'Title is required.';
    if (!newUsedListingFormData.description.trim()) errors.description = 'Description is required.';
    if (!newUsedListingFormData.price || isNaN(parseFloat(newUsedListingFormData.price)) || parseFloat(newUsedListingFormData.price) <= 0) errors.price = 'Valid price is required.';
    if (!newUsedListingFormData.location.trim()) errors.location = 'Location is required.';
    if (!newUsedListingFormData.condition) errors.condition = 'Condition is required.';

    if (newUsedListingFormData.type === 'bike') {
      if (!newUsedListingFormData.make) errors.make = 'Make is required for bikes.';
      if (!newUsedListingFormData.model) errors.model = 'Model is required for bikes.';
      if (!newUsedListingFormData.year || isNaN(parseInt(newUsedListingFormData.year)) || parseInt(newUsedListingFormData.year) < 1900 || parseInt(newUsedListingFormData.year) > new Date().getFullYear() + 1) errors.year = 'Valid year is required.';
      if (!newUsedListingFormData.odometer || isNaN(parseFloat(newUsedListingFormData.odometer)) || parseFloat(newUsedListingFormData.odometer) < 0) errors.odometer = 'Valid odometer is required.';
    } else if (newUsedListingFormData.type === 'gear' || newUsedListingFormData.type === 'accessory' || newUsedListingFormData.type === 'part') {
      if (!newUsedListingFormData.category) errors.category = 'Category is required for this item type.';
      if (!newUsedListingFormData.brand.trim()) errors.brand = 'Brand is required.';
    }

    setNewUsedListingFormErrors(errors);
    return Object.keys(errors).length === 0;
  }, [newUsedListingFormData]);

  const handlePostNewUsedListing = useCallback(async (e) => {
    e.preventDefault();
    if (!isAuthenticated) {
      setPostUsedListingError('You must be logged in to post a listing.');
      return;
    }
    if (!validateNewUsedListingForm()) {
      return;
    }

    setIsPostingUsedListing(true);
    setPostUsedListingError(null);

    try {
      // Simulate API call to backend /api/marketplace/listings
      await new Promise(resolve => setTimeout(resolve, 1500));

      const newListing = {
        id: generateUniqueId(),
        sellerId: user.id,
        sellerName: user.username || 'Anonymous Seller',
        postedDate: new Date().toISOString(),
        ...newUsedListingFormData,
        price: parseFloat(newUsedListingFormData.price),
        odometer: newUsedListingFormData.type === 'bike' ? parseFloat(newUsedListingFormData.odometer) : undefined,
        year: newUsedListingFormData.type === 'bike' ? parseInt(newUsedListingFormData.year) : undefined,
        features: newUsedListingFormData.features.split(',').map(f => f.trim()).filter(Boolean),
        // Default image if none provided
        imageUrl: newUsedListingFormData.imageUrl || `https://placehold.co/300x200/CCCCCC/000000?text=${newUsedListingFormData.type === 'bike' ? 'Bike' : newUsedListingFormData.type.toUpperCase()}`,
      };

      setUsedListings(prev => [newListing, ...prev]); // Add to the top of the list
      setNewUsedListingFormData({ // Reset form to initial empty state
        type: 'bike', title: '', description: '', price: '', make: '', model: '', year: '', odometer: '',
        condition: '', location: '', imageUrl: '', category: '', features: '', brand: '', size: '',
      });
      setAiPricingInsight(null); // Clear pricing insight
      setShowPostUsedListingModal(false);
      alert('Your listing has been posted successfully!'); // Replace with a Modal/Toast
    } catch (err) {
      console.error('Error posting listing:', err);
      setPostUsedListingError('Failed to post listing. Please try again.');
    } finally {
      setIsPostingUsedListing(false);
    }
  }, [isAuthenticated, newUsedListingFormData, user, validateNewUsedListingForm]);

  // AI Pricing Insight (for user's own item)
  const handleGetPricingInsight = useCallback(async () => {
    if (!isAuthenticated) {
      setPostUsedListingError('You must be logged in to get pricing insights.');
      return;
    }
    // Basic validation for pricing insight
    if (newUsedListingFormData.type !== 'bike' || !newUsedListingFormData.make || !newUsedListingFormData.model || !newUsedListingFormData.year || !newUsedListingFormData.odometer) {
      setPostUsedListingError('Please provide Make, Model, Year, and Odometer for a bike to get pricing insight.');
      return;
    }

    setIsGettingPricingInsight(true);
    setPostUsedListingError(null);
    setAiPricingInsight(null); // Clear previous insight

    try {
      // Prompt the AI to generate a pricing insight
      const prompt = `Given the following motorcycle details, provide a fair market price range (min and max in INR) and a brief explanation.
      Make: ${newUsedListingFormData.make}
      Model: ${newUsedListingFormData.model}
      Year: ${newUsedListingFormData.year}
      Odometer: ${newUsedListingFormData.odometer} km
      Condition: ${newUsedListingFormData.condition}
      Location: ${newUsedListingFormData.location}
      
      Provide the response as a JSON object with 'min' (number), 'max' (number), and 'message' (string).`;

      const payload = {
        contents: [{ role: "user", parts: [{ text: prompt }] }],
        generationConfig: {
          responseMimeType: "application/json",
          responseSchema: {
            type: "OBJECT",
            properties: {
              min: { type: "NUMBER" },
              max: { type: "NUMBER" },
              message: { type: "STRING" }
            },
            required: ["min", "max", "message"]
          }
        }
      };

      const apiKey = ""; // Canvas will provide this
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      const result = await response.json();

      if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {
        const jsonString = result.candidates[0].content.parts[0].text;
        const cleanedJsonString = jsonString.startsWith('```json') ? jsonString.substring(7, jsonString.lastIndexOf('```')) : jsonString;
        const parsedData = JSON.parse(cleanedJsonString);
        setAiPricingInsight({
          min: parsedData.min,
          max: parsedData.max,
          message: parsedData.message
        });
      } else {
        setPostUsedListingError('AI could not generate pricing insight. Please try again.');
      }
    } catch (err) {
      console.error('Error getting pricing insight:', err);
      setPostUsedListingError('Failed to get pricing insight. Please check inputs or try again.');
    } finally {
      setIsGettingPricingInsight(false);
    }
  }, [isAuthenticated, newUsedListingFormData]);


  // --- Overall Loading and Error States ---
  const showOverallLoading = isLoadingAuth || isLoadingRider || isLoadingVehicle ||
                             isFetchingUsedListings || isFetchingNewBikeModels || isFetchingServices ||
                             isPostingUsedListing || isGettingPricingInsight || isGettingMarketplaceRecs ||
                             isGettingNewBikeSuggestions;
  const showOverallError = authError || usedListingsError || newBikeModelsError || servicesError || postUsedListingError;

  // --- Render Logic for Each Tab ---

  const renderUsedListingsTab = () => (
    <div className="space-y-6">
      <Card title="Search & Filter Used Items" className="bg-blue-50 border-blue-200">
        <Input
          label="Search Keyword"
          id="usedSearch"
          name="search"
          value={usedFilters.search}
          onChange={handleFilterChange(setUsedFilters)}
          placeholder="e.g., Himalayan, Jacket, Helmet"
          className="mb-3"
        />
        <Select
          label="Item Type"
          id="usedItemType"
          name="type"
          value={usedFilters.type}
          onChange={handleFilterChange(setUsedFilters)}
          options={itemTypes}
          className="mb-3"
        />
        {usedFilters.type === 'bike' && (
          <>
            <Select
              label="Make"
              id="usedBikeMake"
              name="make"
              value={usedFilters.make}
              onChange={handleFilterChange(setUsedFilters)}
              options={bikeMakes}
              className="mb-3"
            />
            {usedFilters.make && (
              <Select
                label="Model"
                id="usedBikeModel"
                name="model"
                value={usedFilters.model}
                onChange={handleFilterChange(setUsedFilters)}
                options={[{ value: '', label: 'All Models' }, ...getBikeModelsByMake(usedFilters.make)]}
                className="mb-3"
              />
            )}
            <Input
              label="Min Odometer (km)"
              id="usedMinOdometer"
              name="minOdometer"
              type="number"
              value={usedFilters.minOdometer}
              onChange={handleFilterChange(setUsedFilters)}
              placeholder="e.g., 10000"
              className="mb-3"
            />
            <Input
              label="Max Odometer (km)"
              id="usedMaxOdometer"
              name="maxOdometer"
              type="number"
              value={usedFilters.maxOdometer}
              onChange={handleFilterChange(setUsedFilters)}
              placeholder="e.g., 50000"
              className="mb-3"
            />
          </>
        )}
        {(usedFilters.type === 'gear' || usedFilters.type === 'accessory' || usedFilters.type === 'part') && (
          <Select
            label="Category"
            id="usedGearCategory"
            name="category"
            value={usedFilters.category}
            onChange={handleFilterChange(setUsedFilters)}
            options={gearCategories}
            className="mb-3"
          />
        )}
        <Select
          label="Condition"
          id="usedCondition"
          name="condition"
          value={usedFilters.condition}
          onChange={handleFilterChange(setUsedFilters)}
          options={itemConditions}
          className="mb-3"
        />
        <Select
          label="Location"
          id="usedLocation"
          name="location"
          value={usedFilters.location}
          onChange={handleFilterChange(setUsedFilters)}
          options={locations}
          className="mb-3"
        />
        <Input
          label="Min Price (₹)"
          id="usedMinPrice"
          name="minPrice"
          type="number"
          value={usedFilters.minPrice}
          onChange={handleFilterChange(setUsedFilters)}
          placeholder="e.g., 50000"
          className="mb-3"
        />
        <Input
          label="Max Price (₹)"
          id="usedMaxPrice"
          name="maxPrice"
          type="number"
          value={usedFilters.maxPrice}
          onChange={handleFilterChange(setUsedFilters)}
          placeholder="e.g., 200000"
          className="mb-3"
        />
        <Button onClick={() => setUsedFilters({ search: '', type: '', make: '', model: '', minPrice: '', maxPrice: '', condition: '', minOdometer: '', maxOdometer: '', location: '' })} variant="secondary" size="sm" className="w-full mt-4">
          Clear Filters
        </Button>
      </Card>

      {/* AI Marketplace Recommendations */}
      {isAuthenticated && aiMarketplaceRecommendations.length > 0 && (
        <Card title="AI Recommendations for You" className="mt-6 bg-green-50 border-green-200">
          {isGettingMarketplaceRecs ? (
            <LoadingSpinner size="sm" color="green" />
          ) : (
            <>
              <p className="text-sm text-green-700 mb-3">
                Based on your profile and vehicle, our AI suggests:
              </p>
              <ul className="list-disc list-inside text-sm text-green-800 space-y-1">
                {aiMarketplaceRecommendations.map((rec, index) => (
                  <li key={index}>{rec}</li>
                ))}
              </ul>
            </>
          )}
        </Card>
      )}

      <h2 className="text-xl font-bold text-gray-800 mb-4 mt-6">Available Used Items ({filteredUsedListings.length})</h2>
      {isFetchingUsedListings ? (
        <Card className="py-8 text-center">
          <LoadingSpinner size="md" />
          <p className="mt-3 text-gray-600">Generating used listings with AI...</p>
        </Card>
      ) : filteredUsedListings.length === 0 ? (
        <Card>
          <p className="text-center text-gray-600 py-8">No items found matching your criteria. Try adjusting filters or check back later!</p>
        </Card>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          {filteredUsedListings.map(item => (
            <Card key={item.id} className="p-3">
              <img
                src={item.imageUrl}
                alt={item.title}
                className="w-full h-40 object-cover rounded-md mb-3"
                onError={(e) => { e.target.onerror = null; e.target.src = `https://placehold.co/300x200/E0E0E0/666666?text=${item.type === 'bike' ? 'Bike' : item.type.toUpperCase()}`; }}
              />
              <h3 className="font-semibold text-lg text-gray-800 truncate">{item.title}</h3>
              <p className="text-blue-600 font-bold text-xl my-1">{formatPrice(item.price)}</p>
              <p className="text-sm text-gray-600 mb-2">
                {item.location} • {item.odometer ? formatOdometer(item.odometer) : item.condition}
              </p>
              <p className="text-xs text-gray-500 mb-3">Posted: {formatPostedDate(item.postedDate)}</p>
              <div className="flex justify-between items-center mt-3">
                <Button onClick={() => handleViewUsedListingDetails(item)} variant="secondary" size="sm">
                  View Details
                </Button>
                <Button onClick={() => alert(`Contacting ${item.sellerName} for ${item.title}...`)} variant="primary" size="sm">
                  Contact Seller
                </Button>
              </div>
            </Card>
          ))}
        </div>
      )}

      {/* Used Listing Detail Modal */}
      <Modal
        isOpen={showUsedListingModal}
        onClose={handleCloseUsedListingModal}
        title={selectedUsedListing?.title || "Item Details"}
        className="max-w-2xl"
      >
        {selectedUsedListing && (
          <div className="space-y-4">
            <img
              src={selectedUsedListing.imageUrl}
              alt={selectedUsedListing.title}
              className="w-full h-56 object-cover rounded-lg mb-4"
              onError={(e) => { e.target.onerror = null; e.target.src = `https://placehold.co/300x200/E0E0E0/666666?text=${selectedUsedListing.type === 'bike' ? 'Bike' : selectedUsedListing.type.toUpperCase()}`; }}
            />
            <p className="text-3xl font-bold text-blue-600">{formatPrice(selectedUsedListing.price)}</p>
            <p className="text-gray-700 leading-relaxed">{selectedUsedListing.description}</p>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 text-sm">
              <ListItem label="Type" value={selectedUsedListing.type === 'bike' ? 'Motorcycle' : selectedUsedListing.type.toUpperCase()} />
              {selectedUsedListing.make && <ListItem label="Make" value={selectedUsedListing.make} />}
              {selectedUsedListing.model && <ListItem label="Model" value={selectedUsedListing.model} />}
              {selectedUsedListing.year && <ListItem label="Year" value={selectedUsedListing.year} />}
              {selectedUsedListing.odometer && <ListItem label="Odometer" value={formatOdometer(selectedUsedListing.odometer)} />}
              <ListItem label="Condition" value={selectedUsedListing.condition} />
              <ListItem label="Location" value={selectedUsedListing.location} />
              <ListItem label="Posted By" value={selectedUsedListing.sellerName} />
              <ListItem label="Posted On" value={new Date(selectedUsedListing.postedDate).toLocaleDateString('en-IN', { year: 'numeric', month: 'short', day: 'numeric' })} />
              {selectedUsedListing.category && <ListItem label="Category" value={selectedUsedListing.category} />}
              {selectedUsedListing.brand && <ListItem label="Brand" value={selectedUsedListing.brand} />}
              {selectedUsedListing.size && <ListItem label="Size" value={selectedUsedListing.size} />}
              {selectedUsedListing.features && selectedUsedListing.features.length > 0 && (
                <ListItem label="Features" value={selectedUsedListing.features.join(', ')} className="col-span-2" />
              )}
            </div>
            <div className="flex justify-end space-x-3 mt-6">
              <Button onClick={() => alert(`Initiating chat with ${selectedUsedListing.sellerName}...`)} variant="secondary" size="md">
                Chat with Seller
              </Button>
              <Button onClick={() => alert(`Calling ${selectedUsedListing.sellerName} at dummy number...`)} variant="primary" size="md">
                Call Seller
              </Button>
            </div>
          </div>
        )}
      </Modal>

      {/* Post New Used Listing Modal */}
      <Modal
        isOpen={showPostUsedListingModal}
        onClose={() => setShowPostUsedListingModal(false)}
        title="Post Your Item for Sale"
        className="max-w-xl"
      >
        {!isAuthenticated ? (
          <div className="text-center py-4">
            <p className="text-gray-600 mb-4">You must be logged in to post an item.</p>
            <Link to="/login">
              <Button variant="primary" size="md">Login Now</Button>
            </Link>
          </div>
        ) : (
          <form onSubmit={handlePostNewUsedListing} className="space-y-4">
            {postUsedListingError && <ErrorMessage message={postUsedListingError} type="error" onClose={() => setPostUsedListingError(null)} />}
            <Select
              label="Item Type"
              id="newListingType"
              name="type"
              value={newUsedListingFormData.type}
              onChange={handleNewUsedListingChange}
              options={itemTypes.filter(opt => opt.value !== '')} // Exclude 'All Types'
              required
              error={newUsedListingFormErrors.type}
            />
            {(newUsedListingFormData.type === 'gear' || newUsedListingFormData.type === 'accessory' || newUsedListingFormData.type === 'part') && (
              <>
                <Select
                  label="Category"
                  id="newListingCategory"
                  name="category"
                  value={newUsedListingFormData.category}
                  onChange={handleNewUsedListingChange}
                  options={gearCategories.filter(opt => opt.value !== '')}
                  required
                  error={newUsedListingFormErrors.category}
                />
                <Input
                  label="Brand"
                  id="newListingBrand"
                  name="brand"
                  value={newUsedListingFormData.brand}
                  onChange={handleNewUsedListingChange}
                  placeholder="e.g., Rynox, Vega, KTM"
                  required
                  error={newUsedListingFormErrors.brand}
                />
                <Input
                  label="Size (if applicable)"
                  id="newListingSize"
                  name="size"
                  value={newUsedListingFormData.size}
                  onChange={handleNewUsedListingChange}
                  placeholder="e.g., M, L, XL, Universal"
                />
              </>
            )}
            <Input
              label="Title"
              id="newListingTitle"
              name="title"
              value={newUsedListingFormData.title}
              onChange={handleNewUsedListingChange}
              placeholder="e.g., 2021 Royal Enfield Himalayan, Riding Jacket"
              required
              error={newUsedListingFormErrors.title}
            />
            <Input
              label="Description"
              id="newListingDescription"
              name="description"
              value={newUsedListingFormData.description}
              onChange={handleNewUsedListingChange}
              placeholder="Provide detailed description of your item..."
              required
              className="h-24 resize-y"
              error={newUsedListingFormErrors.description}
            />
            <Input
              label="Price (₹)"
              id="newListingPrice"
              name="price"
              type="number"
              value={newUsedListingFormData.price}
              onChange={handleNewUsedListingChange}
              placeholder="e.g., 185000"
              required
              min="0"
              error={newUsedListingFormErrors.price}
            />
            <Select
              label="Location"
              id="newListingLocation"
              name="location"
              value={newUsedListingFormData.location}
              onChange={handleNewUsedListingChange}
              options={locations.filter(opt => opt.value !== '')}
              required
              error={newUsedListingFormErrors.location}
            />
            <Select
              label="Condition"
              id="newListingCondition"
              name="condition"
              value={newUsedListingFormData.condition}
              onChange={handleNewUsedListingChange}
              options={itemConditions.filter(opt => opt.value !== '')}
              required
              error={newUsedListingFormErrors.condition}
            />
            <Input
              label="Image URL (Optional)"
              id="newListingImageUrl"
              name="imageUrl"
              value={newUsedListingFormData.imageUrl}
              onChange={handleNewUsedListingChange}
              placeholder="e.g., https://example.com/bike.jpg"
            />

            {newUsedListingFormData.type === 'bike' && (
              <>
                <Select
                  label="Make"
                  id="newListingMake"
                  name="make"
                  value={newUsedListingFormData.make}
                  onChange={handleNewUsedListingChange}
                  options={bikeMakes.filter(opt => opt.value !== '')}
                  required
                  error={newUsedListingFormErrors.make}
                />
                {newUsedListingFormData.make && (
                  <Select
                    label="Model"
                    id="newListingModel"
                    name="model"
                    value={newUsedListingFormData.model}
                    onChange={handleNewUsedListingChange}
                    options={getBikeModelsByMake(newUsedListingFormData.make)}
                    required
                    error={newUsedListingFormErrors.model}
                  />
                )}
                <Input
                  label="Year"
                  id="newListingYear"
                  name="year"
                  type="number"
                  value={newUsedListingFormData.year}
                  onChange={handleNewUsedListingChange}
                  placeholder="e.g., 2021"
                  required
                  min="1900"
                  max={new Date().getFullYear() + 1}
                  error={newUsedListingFormErrors.year}
                />
                <Input
                  label="Odometer (km)"
                  id="newListingOdometer"
                  name="odometer"
                  type="number"
                  value={newUsedListingFormData.odometer}
                  onChange={handleNewUsedListingChange}
                  placeholder="e.g., 15000"
                  required
                  min="0"
                  error={newUsedListingFormErrors.odometer}
                />
                <Input
                  label="Features (comma-separated)"
                  id="newListingFeatures"
                  name="features"
                  value={newUsedListingFormData.features}
                  onChange={handleNewUsedListingChange}
                  placeholder="e.g., ABS, Dual Sport Tires, Crash Guards"
                />
                <Button
                  onClick={handleGetPricingInsight}
                  variant="secondary"
                  size="sm"
                  className="w-full"
                  disabled={isGettingPricingInsight || !newUsedListingFormData.make || !newUsedListingFormData.model || !newUsedListingFormData.year || !newUsedListingFormData.odometer}
                >
                  {isGettingPricingInsight ? 'Getting Insight...' : 'Get AI Pricing Insight'}
                </Button>
                {aiPricingInsight && (
                  <p className="text-sm text-blue-700 mt-2 p-2 bg-blue-50 rounded-md border border-blue-200">
                    {aiPricingInsight.message}
                  </p>
                )}
              </>
            )}

            <Button
              type="submit"
              variant="primary"
              size="lg"
              className="w-full mt-6"
              disabled={isPostingUsedListing}
            >
              {isPostingUsedListing ? 'Posting...' : 'Post Listing'}
            </Button>
          </form>
        )}
      </Modal>
    </div>
  );

  const renderNewBikesTab = () => (
    <div className="space-y-6">
      <Card title="Search & Filter New Bikes" className="bg-green-50 border-green-200">
        <Input
          label="Search Keyword"
          id="newBikeSearch"
          name="search"
          value={newBikeFilters.search}
          onChange={handleFilterChange(setNewBikeFilters)}
          placeholder="e.g., Pulsar, Apache"
          className="mb-3"
        />
        <Select
          label="Make"
          id="newBikeMake"
          name="make"
          value={newBikeFilters.make}
          onChange={handleFilterChange(setNewBikeFilters)}
          options={bikeMakes}
          className="mb-3"
        />
        <Select
          label="Type"
          id="newBikeType"
          name="type"
          value={newBikeFilters.type}
          onChange={handleFilterChange(setNewBikeFilters)}
          options={[{ value: '', label: 'Any Type' }, { value: 'Roadster', label: 'Roadster' }, { value: 'Naked Sport', label: 'Naked Sport' }, { value: 'Adventure', label: 'Adventure' }, { value: 'Cruiser', label: 'Cruiser' }, { value: 'Commuter', label: 'Commuter' }, { value: 'Sport', label: 'Sport' }]}
          className="mb-3"
        />
        <Input
          label="Min Price (₹)"
          id="newBikeMinPrice"
          name="minPrice"
          type="number"
          value={newBikeFilters.minPrice}
          onChange={handleFilterChange(setNewBikeFilters)}
          placeholder="e.g., 100000"
          className="mb-3"
        />
        <Input
          label="Max Price (₹)"
          id="newBikeMaxPrice"
          name="maxPrice"
          type="number"
          value={newBikeFilters.maxPrice}
          onChange={handleFilterChange(setNewBikeFilters)}
          placeholder="e.g., 250000"
          className="mb-3"
        />
        <Input
          label="Min Engine CC"
          id="newBikeMinEngineCC"
          name="minEngineCC"
          type="number"
          value={newBikeFilters.minEngineCC}
          onChange={handleFilterChange(setNewBikeFilters)}
          placeholder="e.g., 200"
          className="mb-3"
        />
        <Input
          label="Max Engine CC"
          id="newBikeMaxEngineCC"
          name="maxEngineCC"
          type="number"
          value={newBikeFilters.maxEngineCC}
          onChange={handleFilterChange(setNewBikeFilters)}
          placeholder="e.g., 400"
          className="mb-3"
        />
        <Input
          label="Min Mileage (kmpl)"
          id="newBikeMinMileage"
          name="minMileage"
          type="number"
          value={newBikeFilters.minMileage}
          onChange={handleFilterChange(setNewBikeFilters)}
          placeholder="e.g., 30"
          className="mb-3"
        />
        <Input
          label="Max Mileage (kmpl)"
          id="newBikeMaxMileage"
          name="maxMileage"
          type="number"
          value={newBikeFilters.maxMileage}
          onChange={handleFilterChange(setNewBikeFilters)}
          placeholder="e.g., 50"
          className="mb-3"
        />
        <Button onClick={() => setNewBikeFilters({ search: '', make: '', type: '', minPrice: '', maxPrice: '', minEngineCC: '', maxEngineCC: '', minMileage: '', maxMileage: '' })} variant="secondary" size="sm" className="w-full mt-4">
          Clear Filters
        </Button>
      </Card>

      {/* AI New Bike Suggestions */}
      {isAuthenticated && aiNewBikeSuggestions.length > 0 && (
        <Card title="AI New Bike Suggestions" className="mt-6 bg-blue-50 border-blue-200">
          {isGettingNewBikeSuggestions ? (
            <LoadingSpinner size="sm" color="blue" />
          ) : (
            <>
              <p className="text-sm text-blue-700 mb-3">
                Based on your rider profile, our AI recommends:
              </p>
              <ul className="list-disc list-inside text-sm text-blue-800 space-y-1">
                {aiNewBikeSuggestions.map((suggestion, index) => (
                  <li key={index}>{suggestion}</li>
                ))}
              </ul>
            </>
          )}
        </Card>
      )}

      <h2 className="text-xl font-bold text-gray-800 mb-4 mt-6">New Bike Models ({filteredNewBikeModels.length})</h2>
      {isFetchingNewBikeModels ? (
        <Card className="py-8 text-center">
          <LoadingSpinner size="md" />
          <p className="mt-3 text-gray-600">Generating new bike models with AI...</p>
        </Card>
      ) : filteredNewBikeModels.length === 0 ? (
        <Card>
          <p className="text-center text-gray-600 py-8">No new bike models found matching your criteria. Try adjusting filters or check back later!</p>
        </Card>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          {filteredNewBikeModels.map(model => (
            <Card key={model.id} className="p-3">
              <img
                src={model.imageUrl}
                alt={model.model}
                className="w-full h-40 object-cover rounded-md mb-3"
                onError={(e) => { e.target.onerror = null; e.target.src = `https://placehold.co/300x200/E0E0E0/666666?text=${model.model}`; }}
              />
              <h3 className="font-semibold text-lg text-gray-800 truncate">{model.make} {model.model}</h3>
              <p className="text-blue-600 font-bold text-xl my-1">{formatPrice(model.price)}</p>
              <p className="text-sm text-gray-600 mb-2">
                {model.engineCC}cc • {model.mileage} kmpl • {model.reviews} ⭐
              </p>
              <div className="flex justify-between items-center mt-3">
                <Button onClick={() => handleViewNewBikeDetails(model)} variant="secondary" size="sm">
                  View Specs
                </Button>
                <Button onClick={() => alert(`Comparing ${model.make} ${model.model}...`)} variant="primary" size="sm">
                  Compare
                </Button>
              </div>
            </Card>
          ))}
        </div>
      )}

      {/* New Bike Detail Modal */}
      <Modal
        isOpen={showNewBikeModal}
        onClose={handleCloseNewBikeModal}
        title={selectedNewBike?.model || "Bike Details"}
        className="max-w-2xl"
      >
        {selectedNewBike && (
          <div className="space-y-4">
            <img
              src={selectedNewBike.imageUrl}
              alt={selectedNewBike.model}
              className="w-full h-56 object-cover rounded-lg mb-4"
              onError={(e) => { e.target.onerror = null; e.target.src = `https://placehold.co/300x200/E0E0E0/666666?text=${selectedNewBike.model}`; }}
            />
            <p className="text-3xl font-bold text-blue-600">{formatPrice(selectedNewBike.price)}</p>
            <p className="text-gray-700 leading-relaxed">{selectedNewBike.description}</p>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 text-sm">
              <ListItem label="Make" value={selectedNewBike.make} />
              <ListItem label="Model" value={selectedNewBike.model} />
              <ListItem label="Engine" value={`${selectedNewBike.engineCC} cc`} />
              <ListItem label="Power" value={`${selectedNewBike.powerHP} HP`} />
              <ListItem label="Torque" value={`${selectedNewBike.torqueNM} NM`} />
              <ListItem label="Mileage" value={`${selectedNewBike.mileage} kmpl`} />
              <ListItem label="Type" value={selectedNewBike.type} />
              <ListItem label="Top Speed" value={`${selectedNewBike.topSpeed} kmph`} />
              <ListItem label="Fuel Tank" value={`${selectedNewBike.fuelTank} litres`} />
              <ListItem label="Weight" value={`${selectedNewBike.weight} kg`} />
              <ListItem label="Reviews" value={`${selectedNewBike.reviews} / 5`} />
              {selectedNewBike.colors && selectedNewBike.colors.length > 0 && (
                <ListItem label="Colors" value={selectedNewBike.colors.join(', ')} className="col-span-2" />
              )}
              {selectedNewBike.features && selectedNewBike.features.length > 0 && (
                <ListItem label="Key Features" value={selectedNewBike.features.join(', ')} className="col-span-2" />
              )}
            </div>
            <div className="flex justify-end space-x-3 mt-6">
              <Button onClick={() => alert(`Comparing ${selectedNewBike.make} ${selectedNewBike.model}...`)} variant="primary" size="md">
                Compare Bike
              </Button>
              <Button onClick={() => alert(`Requesting test ride for ${selectedNewBike.make} ${selectedNewBike.model}...`)} variant="secondary" size="md">
                Request Test Ride
              </Button>
            </div>
          </div>
        )}
      </Modal>
    </div>
  );

  const renderServicesTab = () => (
    <div className="space-y-6">
      <Card title="Search & Filter Services" className="bg-yellow-50 border-yellow-200">
        <Input
          label="Search Service"
          id="serviceSearch"
          name="search"
          value={serviceFilters.search}
          onChange={handleFilterChange(setServiceFilters)}
          placeholder="e.g., maintenance, paint, rental"
          className="mb-3"
        />
        <Select
          label="Service Type"
          id="serviceType"
          name="type"
          value={serviceFilters.type}
          onChange={handleFilterChange(setServiceFilters)}
          options={serviceTypes}
          className="mb-3"
        />
        <Select
          label="Location"
          id="serviceLocation"
          name="location"
          value={serviceFilters.location}
          onChange={handleFilterChange(setServiceFilters)}
          options={locations}
          className="mb-3"
        />
        <Input
          label="Min Rating (out of 5)"
          id="serviceMinRating"
          name="minRating"
          type="number"
          value={serviceFilters.minRating}
          onChange={handleFilterChange(setServiceFilters)}
          placeholder="e.g., 4"
          min="0"
          max="5"
          step="0.1"
          className="mb-3"
        />
        <Button onClick={() => setServiceFilters({ search: '', type: '', location: '', minRating: '' })} variant="secondary" size="sm" className="w-full mt-4">
          Clear Filters
        </Button>
      </Card>

      <h2 className="text-xl font-bold text-gray-800 mb-4 mt-6">Service Providers ({filteredServiceProviders.length})</h2>
      {isFetchingServices ? (
        <Card className="py-8 text-center">
          <LoadingSpinner size="md" />
          <p className="mt-3 text-gray-600">Generating service providers with AI...</p>
        </Card>
      ) : filteredServiceProviders.length === 0 ? (
        <Card>
          <p className="text-center text-gray-600 py-8">No service providers found matching your criteria. Try adjusting filters or check back later!</p>
        </Card>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          {filteredServiceProviders.map(provider => (
            <Card key={provider.id} className="p-3">
              <img
                src={provider.imageUrl}
                alt={provider.name}
                className="w-full h-40 object-cover rounded-md mb-3"
                onError={(e) => { e.target.onerror = null; e.target.src = `https://placehold.co/300x200/E0E0E0/666666?text=Service`; }}
              />
              <h3 className="font-semibold text-lg text-gray-800 truncate">{provider.name}</h3>
              <p className="text-sm text-gray-600 my-1">{provider.type} • {provider.location}</p>
              <p className="text-sm text-yellow-600 font-bold mb-2">{provider.rating} ⭐ Rating</p>
              <div className="flex justify-between items-center mt-3">
                <Button onClick={() => handleViewServiceDetails(provider)} variant="secondary" size="sm">
                  View Details
                </Button>
                <Button onClick={() => alert(`Calling ${provider.contact} for ${provider.name}...`)} variant="primary" size="sm">
                  Call Now
                </Button>
              </div>
            </Card>
          ))}
        </div>
      )}

      {/* Service Detail Modal */}
      <Modal
        isOpen={showServiceModal}
        onClose={handleCloseServiceModal}
        title={selectedService?.name || "Service Details"}
        className="max-w-xl"
      >
        {selectedService && (
          <div className="space-y-4">
            <img
              src={selectedService.imageUrl}
              alt={selectedService.name}
              className="w-full h-56 object-cover rounded-lg mb-4"
              onError={(e) => { e.target.onerror = null; e.target.src = `https://placehold.co/300x200/E0E0E0/666666?text=Service`; }}
            />
            <h3 className="text-2xl font-bold text-gray-800">{selectedService.name}</h3>
            <p className="text-gray-700 leading-relaxed">{selectedService.description}</p>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 text-sm">
              <ListItem label="Type" value={selectedService.type} />
              <ListItem label="Location" value={selectedService.location} />
              <ListItem label="Rating" value={`${selectedService.rating} / 5`} />
              <ListItem label="Contact" value={selectedService.contact} />
              <ListItem label="Working Hours" value={selectedService.workingHours} className="col-span-2" />
              <ListItem label="Address" value={selectedService.address} className="col-span-2" />
              {selectedService.servicesOffered && selectedService.servicesOffered.length > 0 && (
                <ListItem label="Services Offered" value={selectedService.servicesOffered.join(', ')} className="col-span-2" />
              )}
            </div>
            <div className="flex justify-end space-x-3 mt-6">
              <Button onClick={() => alert(`Calling ${selectedService.contact} for ${selectedService.name}...`)} variant="primary" size="md">
                Call Service Provider
              </Button>
              <Button onClick={() => alert(`Navigating to ${selectedService.address}...`)} variant="secondary" size="md">
                Get Directions
              </Button>
            </div>
          </div>
        )}
      </Modal>
    </div>
  );

  return (
    <MainLayout pageTitle="Ride Marketplace">
      <div className="max-w-4xl mx-auto p-4">
        {showOverallLoading && <LoadingSpinner size="lg" className="my-8" />}
        {showOverallError && (
          <ErrorMessage
            message={showOverallError}
            onClose={() => {
              setUsedListingsError(null);
              setNewBikeModelsError(null);
              setServicesError(null);
              setPostUsedListingError(null);
            }}
          />
        )}

        {!isAuthenticated && !isLoadingAuth && (
          <Card title="Marketplace Access">
            <p className="text-center text-gray-600 mb-4">
              Log in to explore the full marketplace, post your items, and get personalized recommendations.
            </p>
            <Link to="/login">
              <Button variant="primary" size="md" className="w-full mb-3">
                Login Now
              </Button>
            </Link>
            <Link to="/signup">
              <Button variant="secondary" size="md" className="w-full">
                Create Account
              </Button>
            </Link>
          </Card>
        )}

        {isAuthenticated && !showOverallLoading && !showOverallError && (
          <>
            {/* Tab Navigation */}
            <div className="flex justify-center mb-6 bg-white p-2 rounded-xl shadow-sm">
              <Button
                onClick={() => handleTabChange('used')}
                variant={activeTab === 'used' ? 'primary' : 'ghost'}
                className="flex-1 mx-1"
              >
                Used Items
              </Button>
              <Button
                onClick={() => handleTabChange('new')}
                variant={activeTab === 'new' ? 'primary' : 'ghost'}
                className="flex-1 mx-1"
              >
                New Bikes
              </Button>
              <Button
                onClick={() => handleTabChange('services')}
                variant={activeTab === 'services' ? 'primary' : 'ghost'}
                className="flex-1 mx-1"
              >
                Services
              </Button>
            </div>

            {/* Post New Item Button (always visible for authenticated users) */}
            <div className="mb-6">
              <Button onClick={() => setShowPostUsedListingModal(true)} variant="secondary" size="lg" className="w-full">
                <span className="mr-2">➕</span> Post Your Item for Sale
              </Button>
            </div>

            {/* Render Active Tab Content */}
            {activeTab === 'used' && renderUsedListingsTab()}
            {activeTab === 'new' && renderNewBikesTab()}
            {activeTab === 'services' && renderServicesTab()}
          </>
        )}
      </div>
    </MainLayout>
  );
};

export default MarketplacePage;
